/*
  # Create league payments system

  1. New Tables
    - `league_payments`
      - `id` (bigint, primary key)
      - `user_id` (text) - references users(id), the person responsible for payment
      - `team_id` (bigint) - references teams(id), optional for individual payments
      - `league_id` (bigint) - references leagues(id)
      - `amount_due` (decimal) - total amount due
      - `amount_paid` (decimal) - amount paid so far
      - `due_date` (date) - when payment is due
      - `status` (enum) - pending, partial, paid, overdue
      - `payment_method` (enum) - stripe, cash, e_transfer, waived
      - `stripe_order_id` (bigint) - references stripe_orders(id), optional
      - `notes` (text) - optional notes
      - `created_at` (timestamptz)
      - `updated_at` (timestamptz)

  2. Enums
    - `payment_status_enum` - pending, partial, paid, overdue
    - `payment_method_enum` - stripe, cash, e_transfer, waived

  3. Functions
    - `calculate_user_balance()` - calculates outstanding balance for a user
    - `update_payment_status()` - updates payment status based on amounts

  4. Triggers
    - Auto-update payment status when amounts change
    - Auto-update updated_at timestamp

  5. Security
    - Enable RLS on league_payments table
    - Users can view their own payments
    - Admins can manage all payments
*/

-- Create enums
CREATE TYPE payment_status_enum AS ENUM ('pending', 'partial', 'paid', 'overdue');
CREATE TYPE payment_method_enum AS ENUM ('stripe', 'cash', 'e_transfer', 'waived');

-- Create league_payments table
CREATE TABLE IF NOT EXISTS league_payments (
  id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  user_id text NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  team_id bigint REFERENCES teams(id) ON DELETE CASCADE,
  league_id bigint NOT NULL REFERENCES leagues(id) ON DELETE CASCADE,
  amount_due decimal(10,2) NOT NULL DEFAULT 0.00,
  amount_paid decimal(10,2) NOT NULL DEFAULT 0.00,
  due_date date,
  status payment_status_enum NOT NULL DEFAULT 'pending',
  payment_method payment_method_enum,
  stripe_order_id bigint REFERENCES stripe_orders(id),
  notes text,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Enable RLS
ALTER TABLE league_payments ENABLE ROW LEVEL SECURITY;

-- RLS Policies
CREATE POLICY "Users can view their own league payments"
  ON league_payments
  FOR SELECT
  TO authenticated
  USING (user_id = get_current_user_id());

CREATE POLICY "Admins can view all league payments"
  ON league_payments
  FOR SELECT
  TO authenticated
  USING (EXISTS (
    SELECT 1 FROM users 
    WHERE users.auth_id = auth.uid() AND users.is_admin = true
  ));

CREATE POLICY "Admins can manage all league payments"
  ON league_payments
  FOR ALL
  TO authenticated
  USING (EXISTS (
    SELECT 1 FROM users 
    WHERE users.auth_id = auth.uid() AND users.is_admin = true
  ))
  WITH CHECK (EXISTS (
    SELECT 1 FROM users 
    WHERE users.auth_id = auth.uid() AND users.is_admin = true
  ));

-- Indexes for better performance
CREATE INDEX IF NOT EXISTS idx_league_payments_user_id ON league_payments(user_id);
CREATE INDEX IF NOT EXISTS idx_league_payments_team_id ON league_payments(team_id);
CREATE INDEX IF NOT EXISTS idx_league_payments_league_id ON league_payments(league_id);
CREATE INDEX IF NOT EXISTS idx_league_payments_status ON league_payments(status);
CREATE INDEX IF NOT EXISTS idx_league_payments_stripe_order_id ON league_payments(stripe_order_id);

-- Function to update payment status based on amounts
CREATE OR REPLACE FUNCTION update_payment_status()
RETURNS TRIGGER AS $$
BEGIN
  -- Update the payment status based on amounts
  IF NEW.amount_paid >= NEW.amount_due THEN
    NEW.status = 'paid';
  ELSIF NEW.amount_paid > 0 THEN
    NEW.status = 'partial';
  ELSIF NEW.due_date IS NOT NULL AND NEW.due_date < CURRENT_DATE THEN
    NEW.status = 'overdue';
  ELSE
    NEW.status = 'pending';
  END IF;
  
  -- Update the updated_at timestamp
  NEW.updated_at = now();
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to auto-update payment status
DROP TRIGGER IF EXISTS update_league_payment_status ON league_payments;
CREATE TRIGGER update_league_payment_status
  BEFORE INSERT OR UPDATE ON league_payments
  FOR EACH ROW
  EXECUTE FUNCTION update_payment_status();

-- Function to calculate user's outstanding balance
CREATE OR REPLACE FUNCTION calculate_user_outstanding_balance(p_user_id text)
RETURNS decimal(10,2)
LANGUAGE sql
SECURITY DEFINER
AS $$
  SELECT COALESCE(SUM(amount_due - amount_paid), 0.00)
  FROM league_payments
  WHERE user_id = p_user_id
  AND status IN ('pending', 'partial', 'overdue');
$$;

-- Function to create league payment when team is registered
CREATE OR REPLACE FUNCTION create_league_payment_for_team()
RETURNS TRIGGER AS $$
BEGIN
  -- When a new team is created, create a league payment record for the captain
  IF TG_OP = 'INSERT' AND NEW.captain_id IS NOT NULL AND NEW.league_id IS NOT NULL THEN
    -- Get the league cost
    INSERT INTO league_payments (
      user_id,
      team_id,
      league_id,
      amount_due,
      due_date,
      status
    )
    SELECT 
      NEW.captain_id,
      NEW.id,
      NEW.league_id,
      COALESCE(l.cost, 0.00),
      CURRENT_DATE + INTERVAL '30 days', -- Due in 30 days
      'pending'
    FROM leagues l
    WHERE l.id = NEW.league_id
    AND COALESCE(l.cost, 0.00) > 0; -- Only create if there's a cost
  END IF;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to auto-create league payments when teams are registered
DROP TRIGGER IF EXISTS create_league_payment_on_team_insert ON teams;
CREATE TRIGGER create_league_payment_on_team_insert
  AFTER INSERT ON teams
  FOR EACH ROW
  EXECUTE FUNCTION create_league_payment_for_team();

-- View for user payment summary
CREATE VIEW user_payment_summary WITH (security_invoker = true) AS
SELECT 
  lp.user_id,
  l.name as league_name,
  t.name as team_name,
  lp.amount_due,
  lp.amount_paid,
  (lp.amount_due - lp.amount_paid) as amount_outstanding,
  lp.status,
  lp.due_date,
  lp.payment_method,
  lp.created_at,
  lp.updated_at
FROM league_payments lp
JOIN leagues l ON l.id = lp.league_id
LEFT JOIN teams t ON t.id = lp.team_id
WHERE lp.user_id = get_current_user_id()
ORDER BY lp.due_date ASC, lp.created_at DESC;

GRANT SELECT ON user_payment_summary TO authenticated;