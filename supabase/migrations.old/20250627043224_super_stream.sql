/*
  # Create teams table

  1. New Tables
    - `teams`
      - `id` (bigint, primary key)
      - `name` (text) - team name
      - `league_id` (bigint) - foreign key to leagues table
      - `captain_id` (text) - foreign key to users table (team captain)
      - `roster` (text[]) - array of player IDs
      - `active` (boolean) - whether team is active
      - `created_at` (timestamp)
      - `updated_at` (timestamp)

  2. Security
    - Enable RLS on `teams` table
    - Add policies for team management
*/

CREATE TABLE IF NOT EXISTS teams (
  id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  name text NOT NULL,
  league_id bigint REFERENCES leagues(id) ON DELETE CASCADE,
  captain_id text REFERENCES users(id) ON DELETE SET NULL,
  roster text[] DEFAULT '{}',
  active boolean DEFAULT true,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

ALTER TABLE teams ENABLE ROW LEVEL SECURITY;

-- Public can view all teams
CREATE POLICY "Enable read access for all users"
  ON teams
  FOR SELECT
  TO public
  USING (true);

-- Team captains can manage their own teams
CREATE POLICY "Team captains can manage their teams"
  ON teams
  FOR ALL
  TO authenticated
  USING (captain_id = get_current_user_id())
  WITH CHECK (captain_id = get_current_user_id());

-- Admins can manage all teams
CREATE POLICY "Admins can manage all teams"
  ON teams
  FOR ALL
  TO authenticated
  USING (EXISTS (
    SELECT 1 FROM users 
    WHERE users.auth_id = auth.uid() AND users.is_admin = true
  ))
  WITH CHECK (EXISTS (
    SELECT 1 FROM users 
    WHERE users.auth_id = auth.uid() AND users.is_admin = true
  ));

-- Add indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_teams_league_id ON teams(league_id);
CREATE INDEX IF NOT EXISTS idx_teams_captain_id ON teams(captain_id);
CREATE INDEX IF NOT EXISTS idx_teams_active ON teams(active);

-- Create trigger to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

DROP TRIGGER IF EXISTS update_teams_updated_at ON teams;
CREATE TRIGGER update_teams_updated_at
    BEFORE UPDATE ON teams
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();